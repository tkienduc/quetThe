
// chuong trinh quet the rfid mở cửa hàng rào nhà 25.
//code ok ngày 27 /10/2017, viết cho mạch mega .
//bình thường mach ở chế độ chờ quét thẻ khi thẻ đúng cửa mở choi nhac chờ rồi đóng cửa. cảm biến của chưa đóng pin 7 làm cửa báo động.
//kích pin 12 low sẽ xóa het bộ nhớ lưu các thẻ hiện có.
//kich pin 11 low chuyễn sang mode thêm thẻ mới.
//ĐÃ HOÀN CHỈNH N PIN BUTTON ... CÒN PHẢI SỬA LẠI THỜI GIAN SERVO MỞ VÀ MÀU SẮC LED HIỂN THỊ TRANG THÁI 1/11/2017
// CÁC CHÂN BUTTON ĐẾU CÓ CHÂN CHUNG LÀ GND .. TRANG THÁI KHI NHẤN SẼ LÀ LOW . PHẢI LƯU Ý , INPUT_PULLUP MỚI SỬ DỤNG ĐƯỢC.
                                                                       // CÚ PHÁP " if (digitalRead(RESET_BTN) == LOW) {"


#include <EEPROM.h>
#include <Wire.h>
#include <SPI.h>
#include <Servo.h>
#include <MFRC522.h>

#include "pitch.h"

#define SS_PIN 53  //sda pin53 ,mosi pin51 , miso pin50  , sck pin52 
#define RST_PIN 9
#define SERVO_ADDRESS 3
// Led bao loi
#define LED1 4
// Led xanh duong hien thi mo cua thanh cong
#define LED2 2
// Led kiem tra pin
#define LED3 5
#define DOOR_BTN 7
#define BELL 8
#define ESC_BTN 10

#define RESET_BTN 11  // Nut reset de xoa du luu trong EEPROM
#define ADD_CARD 12  //NUT THÊM THẺ

// The hien tai trong RAM
byte currentCard[4];
// Danh sach the luu trong RAM
byte cardList[50][4];

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo servo;

int posServo;

void setup() {
  Wire.begin();
  // Setup serial va lcd
  Serial.begin(9600);

  // Setup dau doc the
  SPI.begin();
  mfrc522.PCD_Init();

  // Dong servo
  servo.attach(SERVO_ADDRESS);
  for (posServo = 50; posServo >= 0; posServo--) {
    servo.write(posServo);
    delay(5);
  }
  servo.detach();

  setupPins();
  kiemTraNutReset();
  checkForEmptyCardSaved();
  addCardsToRAM();
  printAllCards();

}

void kiemTraNutReset() {
  if (digitalRead(RESET_BTN) == LOW) {
    Serial.println("--CHE DO RESET--");
    Serial.println("Luu y chuan bi xoa du lieu trong EEPROM sau 10s...");
    delay(10000);
    for (int i = 0; i < EEPROM.length(); i++) {
      EEPROM[i] = 0;
    }
    successLed();
    Serial.println("Xoa thanh cong");
  }
}

// In card trong RAM ra Serial
void printAllCards() {
  Serial.println("--DS THE--");
  int savedCards = numberOfSavedCards();
  for (int i = 0; i < savedCards; i++) {
    Serial.print("Card ");
    Serial.print(i + 1);
    Serial.print(": ");
    for (int j = 0; j < 4; j++) {
      Serial.print(cardList[i][j], HEX);
    }
    Serial.println("");
  }
}

// Doc byte dau tien trong EEPROM
byte numberOfSavedCards() {
  return EEPROM.read(0);
}

// Kiem tra xem it nhat 1 card luu trong EEPROM
void checkForEmptyCardSaved() {
  if (numberOfSavedCards() == 0) {
    failureLed();
    Serial.println("Khong co the trong EEPROM");
    newCardWizard();
  }
}

void kiemTraNutThemThe() {
  if (digitalRead(ADD_CARD) == LOW) {
    newCardWizard();
    addCardsToRAM();
    printAllCards();
  }
}

// Giao dien them the moi
void newCardWizard() {
  Serial.println("--THEM THE MOI--");
  Serial.println("Vui long scan...");
  bool cardDectected = false;
  do {
    cardDectected = scanCard();
  } while (!cardDectected);
  saveCard();
}

// Scan the va luu gia tri vao bien currentCard
bool scanCard() {
  if (!mfrc522.PICC_IsNewCardPresent()) { return false; }
  if (!mfrc522.PICC_ReadCardSerial()) { return false; }
  Serial.print("MS The: ");
  for (size_t i = 0; i < 4; i++) {
    currentCard[i] = mfrc522.uid.uidByte[i];
    Serial.print(currentCard[i], HEX);
  }
  Serial.println("");
  mfrc522.PICC_HaltA();
  successLed();
  return true;
}

// Luu the vao EEPROM
void saveCard() {
  int startIndex = numberOfSavedCards() * 4 + 1;
  int endIndex = startIndex + 4;
  int i = 0;
  for (int address = startIndex; address < endIndex; address++) {
    EEPROM.write(address, currentCard[i]);
    i++;
  }
  EEPROM.write(0, EEPROM.read(0) + 1);
  Serial.println("The da luu");
  successLed();
}

// Luu danh sach the tu EEPROM vao RAM
void addCardsToRAM() {
  int savedCards = numberOfSavedCards();
  for (int i = 0; i < savedCards; i++) {
    // Luu the vao bien currentCard
    // Assign card to currentCard
    int slot = 1;
    for (int j = 0; j < 4; j++) {
      currentCard[j] = EEPROM.read(i * 4 + slot);
      slot++;
    }
    // Luu currentCard vao cardList
    // Append currentCard to cardList
    for (int j = 0; j < 4; j++) {
      cardList[i][j] = currentCard[j];
    }
  }
  Serial.println("Da load the vao RAM");
}

void loop() {
  Serial.println("Vui long scan...");
  bool detected = false;
  do {
    kiemTraNutKhanCap();
    // Kiem tra cạy cửa
    kiemTraChuaDongCua();

    kiemTraNutThemThe();
    detected = scanCard();
  } while (!detected);

  if (kiemTraTheCoTrongEEPROM()) {
    theDung();
  } else {
    theSai();
  }
}

// Tra ve true neu the da co trong dsach
bool kiemTraTheCoTrongEEPROM() {
  for (int i = 0; i < numberOfSavedCards(); i++) {
    byte a1 = cardList[i][0];
    byte a2 = cardList[i][1];
    byte a3 = cardList[i][2];
    byte a4 = cardList[i][3];
    if (a1 == currentCard[0] && a2 == currentCard[1] && a3 == currentCard[2] && a4 == currentCard[3]) {
      return true;
    }
  }
  return false;
}

// Dat pin mode
void setupPins() {
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(BELL, OUTPUT);
  pinMode(DOOR_BTN, INPUT_PULLUP);
  pinMode(RESET_BTN, INPUT_PULLUP);
  pinMode(ADD_CARD, INPUT_PULLUP);
  pinMode(ESC_BTN, INPUT_PULLUP);
  digitalWrite(LED3, HIGH);
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
}

// Bat den led bao hieu thanh cong
void successLed() {
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(BELL, HIGH);

  digitalWrite(LED1, LOW);
  digitalWrite(LED2, HIGH);
  digitalWrite(LED3, LOW);
  delay(500);
  digitalWrite(BELL, LOW);
}

// Bat den led bao hieu loi
void failureLed() {
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(BELL, HIGH);

  digitalWrite(LED1, HIGH);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);
  delay(500);
  digitalWrite(BELL, LOW);
}

void theSai() {
  // The khong co dung
  // Bật LED đỏ (LED1)
  // Tắt LED xanh (LED2)
  // Còi hú
  // Đợi 1 phút
  digitalWrite(LED1, HIGH);
  digitalWrite(LED2, HIGH);
  digitalWrite(LED3, LOW);
  Serial.println("The nay khong co");
 // digitalWrite(BELL, HIGH);
 // delay(5000); //sua 60000 thành 30000, chờ test lâu quá.khi ra thực tế thay dổi sau
  //digitalWrite(BELL, LOW);
            digitalWrite(BELL, HIGH);
            delay(300);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(400);
            digitalWrite(BELL, LOW);
            delay(300);
            digitalWrite(BELL, HIGH);
            delay(300);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(300);
            digitalWrite(BELL, LOW);
            delay(200);
            digitalWrite(BELL, HIGH);
            delay(400);
             digitalWrite(BELL, HIGH);
            delay(300);
            digitalWrite(BELL, LOW);
            delay(300);
            digitalWrite(BELL, HIGH);
            delay(400);
            digitalWrite(BELL, LOW);
            delay(300);
            digitalWrite(BELL, HIGH);
            delay(300);
            digitalWrite(BELL, LOW);
            delay(300);
            digitalWrite(BELL, HIGH);
            delay(400);
            digitalWrite(BELL, LOW);
            delay(200);
            digitalWrite(BELL, HIGH);
            delay(400);
            digitalWrite(BELL, LOW);
  Serial.println("================================================");
}

void theDung() {
  // The co dung
  // Bật LED xanh (LED2)
  // Tắt LED đỏ (LED1)
  // Mở ổ khoá
  // Còi hú
  // Đóng ổ khoá
  // Đợi 5s
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, HIGH);
  digitalWrite(LED3, LOW); //MOI THEM

  servo.attach(SERVO_ADDRESS);
  // Mo cua
  for (posServo = 0; posServo <= 157; posServo++) {
   servo.write(posServo);
    delay(5);
  }

  Serial.println("The nay dung");
  choiNhac();

  // Dong cua
  for (posServo = 135; posServo >=0; posServo--) {
    servo.write(posServo);
    delay(5);
  }
  servo.detach();

  digitalWrite(LED2, HIGH);
  digitalWrite(LED1, HIGH);
  digitalWrite(LED3, HIGH);
  digitalWrite(BELL, LOW);
}

// HIGH doi thanh LOW
void kiemTraNutKhanCap() {
  int doorStatus = digitalRead(ESC_BTN); //if (digitalRead(ADD_CARD) == LOW) {
  if (doorStatus == LOW) { //ban đầu là HIGH
    Serial.println("Mo Khan Cap");
    theDung();
  }
}

void kiemTraChuaDongCua() {
  int doorStatus = digitalRead(DOOR_BTN);
  while (doorStatus == HIGH) {
    Serial.println("Chua dong cua");
    digitalWrite(LED3, LOW);//DOI 1 THANH 3
    digitalWrite(LED1, HIGH); //MOI THEM
    digitalWrite(LED2, LOW);//MOI THEM
    digitalWrite(BELL, HIGH);
    delay(250);
    digitalWrite(BELL, LOW);
    doorStatus = digitalRead(DOOR_BTN);
  }
  digitalWrite(BELL, LOW);
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, HIGH);
}

void choiNhac() {
  int notes[] = {NOTE_C4, NOTE_G3,NOTE_G3, NOTE_A3, NOTE_G3,0, NOTE_B3, NOTE_C4};
  int beats[] = {4, 8, 8, 4, 4, 4, 4, 4};

  for (int i = 0; i < 1; i++) {
    for (int thisNote = 0; thisNote < 8; thisNote++) {

    // bây giờ ta đặt một nốt nhạc là 1 giây = 1000 mili giây
    // thì ta chia cho các thành phần noteDurations thì sẽ
    // được thời gian chơi các nốt nhạc
    // ví dụ: 4 => 1000/4; 8 ==> 1000/8
    int noteDuration = 1000/beats[thisNote];
    tone(BELL, notes[thisNote],noteDuration);

    // để phân biệt các nốt nhạc hãy delay giữa các nốt nhạc
    // một khoảng thời gian vừa phải. Ví dụ sau đây thực hiện tốt
    // điều đó: Ta sẽ cộng 30% và thời lượng của một nốt
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    //Ngừng phát nhạc để sau đó chơi nhạc tiếp!
    noTone(BELL);
    }
            digitalWrite(BELL, HIGH);
            delay(800);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(700);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(600);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(550);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(530);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(520);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(500);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(400);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(400);
             digitalWrite(BELL, HIGH);
            delay(300);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(250);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(200);
             digitalWrite(BELL, HIGH);
            delay(180);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(160);
            digitalWrite(BELL, LOW);
            delay(100);
            digitalWrite(BELL, HIGH);
            delay(500);
            digitalWrite(BELL, LOW);
  }
  Serial.println("Choi nhac xong");
}
